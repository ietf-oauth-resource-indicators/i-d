<?xml version="1.0" encoding="us-ascii"?>
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" docName="draft-ietf-oauth-resource-indicators-06" ipr="trust200902">
  <front>
    <title abbrev="OAuth Resource Indicators">Resource Indicators for OAuth 2.0</title>

    <author fullname="Brian Campbell" initials="B." surname="Campbell">
      <organization>Ping Identity</organization>
      <address><email>brian.d.campbell@gmail.com</email></address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Yubico</organization>
      <address><email>ve7jtb@ve7jtb.com</email></address>
    </author>

    <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
      <organization>Arm Limited</organization>
      <address><email>hannes.tschofenig@gmx.net</email></address>
    </author>

    <date />

    <area>Security</area>
    <workgroup>OAuth Working Group</workgroup>

    <keyword>OAuth</keyword>
    <keyword>Resource</keyword>
    <keyword>Audience</keyword>

    <abstract>
      <t>
        An extension to the OAuth 2.0
        Authorization Framework defining request parameters that enable a client
        to explicitly signal to an authorization server about the identity of the protected
        resource(s) to which it is requesting access.
      </t>
    </abstract>

  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
<t>
  Several years of deployment and implementation experience with the <xref target="RFC6749">OAuth 2.0 Authorization Framework</xref>
  has uncovered a need, in some circumstances, for the client to explicitly signal to the authorization server where
  it intends to use the access token it is requesting.
</t>
<t>
  Knowing the protected resource (a.k.a. resource server, application, API, etc.) that will process the access token enables the authorization server to construct the token
  as necessary for that entity. Properly encrypting the token (or content within the token) to a particular resource, for example,
  requires knowing which resource will receive and decrypt the token. Furthermore, various resources oftentimes have
  different requirements with respect to the data contained in, or referenced by, the token and knowing the resource
  where the client intends to use the
  token allows the authorization server to mint the token accordingly.
</t>
<t>
  Specific knowledge of the intended recipient(s) of the access token also helps facilitate improved
  security characteristics of the token itself.
  Bearer tokens, currently the most commonly utilized type of OAuth access token,
  allow any party in possession of a token to get access to the associated resources.
  To prevent misuse, several important security assumptions must hold, one of which is that
  an access token must only be valid for use at a
  specific protected resource and for a specific scope of access.
  Section 5.2 of <xref target="RFC6750"/>, for example,
  prescribes including the token's intended recipients within the token to prevent token redirect.
  When the authorization server is informed of
  the resource that will process the access token, it can restrict the intended audience of that token
  to the given resource such that the token cannot be used successfully at other resources.
</t>
<t>
  OAuth scope, from Section 3.3 of <xref target="RFC6749"/>, is sometimes overloaded to convey the
  location or identity of the protected resource, however, doing so isn't always feasible or desirable. Scope is
  typically about what access is being requested rather than where that access will be redeemed
  (e.g. <spanx style="verb">email</spanx>, <spanx style="verb">admin:org</spanx>, <spanx style="verb">user_photos</spanx>,
  <spanx style="verb">channels:read</spanx>, and <spanx style="verb">channels:write</spanx> are a small sample of scope
  values in use in the wild that convey only the type of access and not the location or identity).
</t>
<t>
  In some circumstances and for some deployments, a means for the client to signal to the authorization server where it
  intends to use the access token it's requesting
  is important and useful. A number of implementations and deployments of OAuth 2.0 have already employed proprietary parameters
  toward that end.
  Going forward, this specification aspires to provide a standardized and interoperable alternative to the proprietary approaches.
</t>
    <section anchor="RNC" title="Requirements Notation and Conventions">
<t>
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL"
  in this document are to be interpreted as described in
  BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
  when, and only when, they appear in all capitals, as shown here.
</t>
    </section>

    <section anchor="Terminology" title="Terminology">
      <t>
        This specification uses the terms
        "access token",
        "refresh token",
        "authorization server",
        "resource server",
        "authorization endpoint",
        "authorization request",
        "authorization response",
        "token endpoint",
        "grant type",
        "access token request",
        "access token response",
        and "client"
        defined by <xref target="RFC6749">The OAuth 2.0 Authorization Framework</xref>.
      </t>
    </section>

    </section>

    <section anchor="ResourceParameter" title="Resource Parameter">
      <t>
        In requests to the authorization server, a client MAY indicate the protected resource (a.k.a. resource server, application,
        API, etc.) to which it is requesting access by
        including the following parameter in the request.

      <list style="hanging">

      <t hangText="resource">
        <vspace/>
        Indicates the target service or
        resource to which access is being requested.
        Its value MUST be an
        absolute URI, as specified by Section 4.3 of <xref target="RFC3986"/>,
        which MAY include a query component but MUST NOT include a fragment component.
        The <spanx style="verb">resource</spanx> parameter URI value is an identifier representing the identity of the resource,
        which MAY be a locator that corresponds to a network addressable location where the target resource is hosted.
        Multiple
        <spanx style="verb">resource</spanx>
        parameters MAY be used to indicate
        that the requested token is intended to be used at multiple resources.
      </t>
      </list>

        The parameter value identifies a resource to which the client is requesting access. 
        The parameter can carry the location of a protected resource, typically as an https URL, or a more abstract identifier.
        This enables the authorization server to apply policy as appropriate
        for the resource, such as determining the type and content of tokens to be issued, if and how
        tokens are encrypted, and applying appropriate audience restrictions.
      </t>

      <t>
        The client SHOULD provide the most specific URI that it can for the complete API or set of resources it intends to access.
        In practice a client will know a base URI for the application or resource that it interacts with, which
        is appropriate to use as the value of the <spanx style="verb">resource</spanx> parameter.
        The client SHOULD use the base URI of the API as the <spanx style="verb">resource</spanx> parameter
        value unless specific knowledge of the resource dictates otherwise.
        For example, the value <spanx style="verb">https://api.example.com/</spanx> would be used
        for a resource that is the exclusive application on that host, however,
        if the resource is one of many applications on that host, something like
        <spanx style="verb">https://api.example.com/app/</spanx> would be used as a more specific value.
        Another example, for an API like <xref target="RFC7644">SCIM</xref> that has multiple endpoints such as
        <spanx style="verb">https://apps.example.com/scim/Users</spanx>,
        <spanx style="verb">https://apps.example.com/scim/Groups</spanx>, and
        <spanx style="verb">https://apps.example.com/scim/Schemas</spanx>
        The client would use <spanx style="verb">https://apps.example.com/scim/</spanx> as the resource
        so that the issued access token is valid for all the endpoints of the SCIM API.
      </t>
      <t>
        The following error code is provided for an authorization server to indicate problems with the requested resource(s)
        in response to an authorization request or access token request. It can also be used to inform the client that
        it has requested an invalid combination of resource and scope.
        <list style="hanging">
          <t hangText="invalid_target">
            <vspace/>
            The requested resource is invalid, missing, unknown, or malformed.
          </t>
        </list>
      </t>
      <t>
        The authorization server SHOULD audience-restrict issued access tokens to the
        resource(s) indicated by the <spanx style="verb">resource</spanx> parameter.
        Audience restrictions can be communicated in <xref target="RFC7519">JSON Web Tokens</xref> with the <spanx style="verb">aud</spanx> claim
        and the top-level member of the same name provides the audience restriction information in a <xref target="RFC7662">Token Introspection</xref> response.
        The authorization server may use the exact <spanx style="verb">resource</spanx> value as the audience or it may map from that value to a more
        general URI or abstract identifier for the given resource.
      </t>

      <section anchor="authz-req" title="Authorization Request">
      <t>
        When the <spanx style="verb">resource</spanx> parameter is used in an authorization request to the authorization endpoint, it indicates the identity of
        the protected resource(s) to which access is being requested.
        When an access token will be returned directly from the authorization endpoint via the implicit flow (Section 4.2 of <xref target="RFC6749">OAuth 2.0</xref>),
        the requested resource is applicable to that access token. In the code flow (Section 4.1 of <xref target="RFC6749">OAuth 2.0</xref>) where
        an intermediate representation of the authorization grant (the authorization code) is returned from the authorization endpoint,
        the requested resource is applicable to the full authorization grant.
      </t>
      <t>
        For an authorization request sent as a JSON Web Token (JWT), such as when using
        <xref target="I-D.ietf-oauth-jwsreq">JWT Secured Authorization Request</xref>,
        a single <spanx style="verb">resource</spanx> parameter value
        is represented as a JSON string while multiple values are represented as an array of strings.
      </t>
      <t>
        If the client omits the <spanx style="verb">resource</spanx> parameter when requesting
        authorization, the authorization server MAY process the
        request with no specific resource or by using a pre-defined default resource value.
        Alternatively, the authorization server MAY require clients to specify the resource(s) they intend to
        access and MAY fail requests that omit the parameter with an <spanx style="verb">invalid_target</spanx> error.
        The authorization server might use this data to inform the user about the resources the client
        is going to access on her behalf, to meet policy decision (e.g. refuse the request due to unknown resources),
        and determine the set of resources that can be used in subsequent access token requests.
      </t>
      <t>
        If the authorization server fails to parse the
        provided value(s) or does not consider the resource(s) acceptable, it should reject the request with
        an error response using the error code <spanx style="verb">invalid_target</spanx> as the value of the
        <spanx style="verb">error</spanx> parameter and can provide additional
        information regarding the reasons for the error using the
        <spanx style='verb'>error_description</spanx>.
      </t>
      <t>
        An example of an authorization request where the client tells the authorization server that it wants an access token for use at
        <spanx style="verb">https://api.example.com/app/</spanx> is shown in <xref target="authz-endpoint-example-token"/> below
        (extra line breaks and indentation are for display purposes only).

<figure title="Implicit Flow Authorization Request" anchor="authz-endpoint-example-token">
<artwork><![CDATA[
  GET /as/authorization.oauth2?response_type=token
     &client_id=example-client
     &state=XzZaJlcwYew1u0QBrRv_Gw
     &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Eorg%2Fcb
     &resource=https%3A%2F%2Fapi.example.com%2Fapp%2F HTTP/1.1
  Host: authorization-server.example.com
]]></artwork>
</figure>
      </t>
        <t>
          Below in <xref target="authz-endpoint-example-code"/> is an example of an authorization request
          using the <spanx style="verb">code</spanx> response type
          where the client is requesting access to the resource owner's contacts and calendar data at
          <spanx style="verb">https://cal.example.com/</spanx> and <spanx style="verb">https://contacts.example.com/</spanx>
          (extra line breaks and indentation are for display purposes only).

        <figure title="Code Flow Authorization Request" anchor="authz-endpoint-example-code">
          <artwork><![CDATA[
  GET /as/authorization.oauth2?response_type=code
     &client_id=s6BhdRkqt3
     &state=tNwzQ87pC6llebpmac_IDeeq-mCR2wLDYljHUZUAWuI
     &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Eorg%2Fcb
     &scope=calendar%20contacts
     &resource=https%3A%2F%2Fcal.example.com%2F
     &resource=https%3A%2F%2Fcontacts.example.com%2F HTTP/1.1
  Host: authorization-server.example.com
]]></artwork>
        </figure>
        </t>
    </section>


    <section anchor="token-req" title="Access Token Request">

    <t>
      When the <spanx style="verb">resource</spanx> parameter is used on an access token request made to the token endpoint,
      for all grant types, it indicates the target service or protected resource where the client intends to use
      the requested access token.
    </t>
    <t>
      The resource value(s) that are acceptable to an authorization server in fulfilling an access token request are
      at its sole discretion based on local policy or configuration. In the case of a
      <spanx style="verb">refresh_token</spanx> or <spanx style="verb">authorization_code</spanx> grant type request, such policy may limit the acceptable resources
      to those that were originally granted by the resource owner
      or a subset thereof.
      In the <spanx style="verb">authorization_code</spanx> case where the requested resources are a subset of the set of resources originally granted,
      the authorization server will issue an access token based on that subset of requested resources while any refresh token
      that is returned is bound to the full original grant.
    </t>
    <t>
      When requesting a token, the client can indicate the desired target
      service(s) where it intends to use that token by way of the
      <spanx style="verb">resource</spanx> parameter and can indicate the
      desired scope of the requested token using the <spanx style="verb">scope</spanx> parameter.
      The semantics of such a request are that the client is asking for a
      token with the requested scope that is usable at all the requested
      target services.  Effectively, the requested access rights of the
      token are the cartesian product of all the scopes at all the target
      services.
      To the extent possible, when issuing access tokens,
      the authorization server should downscope the scope value associated with an access token to
      the value the respective resource is able to process and needs to know.
      This further improves privacy as scope values give an indication of what services the resource
      owner uses and downscoping a token to only that which is needed for a particular service can
      limit the extent to which such information is revealed across different services.
      As specified in Section 5.1 of <xref target="RFC6749"/>, the authorization server must indicate
      the access token's effective scope to the client in the <spanx style="verb">scope</spanx>
      response parameter value when it differs from the scope requested by the client.
    </t>
      <t>
        Following from the code flow authorization request shown in <xref target="authz-endpoint-example-code"/>,
        the below examples show an <spanx style="verb">authorization_code</spanx> grant type access token request (<xref target="token-endpoint-example-ac"/>)
        and response (<xref target="response-example-ac"/>) where the client tells the authorization server that
        it wants the access token for use at <spanx style="verb">https://cal.example.com/</spanx>
        (extra line breaks and indentation are for display purposes only).

        <figure title="Access Token Request" anchor="token-endpoint-example-ac">
          <artwork><![CDATA[
  POST /as/token.oauth2 HTTP/1.1
  Host: authorization-server.example.com
  Authorization: Basic czZCaGRSa3F0Mzpoc3FFelFsVW9IQUU5cHg0RlNyNHlJ
  Content-Type: application/x-www-form-urlencoded

  grant_type=authorization_code
  &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Eorg%2Fcb
  &code=10esc29BWC2qZB0acc9v8zAv9ltc2pko105tQauZ
  &resource=https%3A%2F%2Fcal.example.com%2F]]></artwork>
        </figure>

        <figure title="Access Token Response" anchor="response-example-ac">
          <artwork><![CDATA[
   HTTP/1.1 200 OK
   Content-Type: application/json
   Cache-Control: no-cache, no-store

   {
      "access_token":"eyJhbGciOiJFUzI1NiIsImtpZCI6Ijc3In0.eyJpc3MiOi
       JodHRwOi8vYXV0aG9yaXphdGlvbi1zZXJ2ZXIuZXhhbXBsZS5jb20iLCJzdWI
       iOiJfX2JfYyIsImV4cCI6MTU4ODQyMDgwMCwic2NvcGUiOiJjYWxlbmRhciIs
       ImF1ZCI6Imh0dHBzOi8vY2FsLmV4YW1wbGUuY29tLyJ9.nNWJ2dXSxaDRdMUK
       lzs-cYIj8MDoM6Gy7pf_sKrLGsAFf1C2bDhB60DQfW1DZL5npdko1_Mmk5sUf
       zkiQNVpYw",
      "token_type":"Bearer",
      "expires_in":3600,
      "refresh_token":"4LTC8lb0acc6Oy4esc1Nk9BWC0imAwH7kic16BDC2",
      "scope":"calendar"
   }]]></artwork>
        </figure>
      </t>
    <t>
      A subsequent access token request, using the refresh token, where the client tells the authorization server that
      it wants an access token for use at
      <spanx style="verb">https://contacts.example.com/</spanx> is shown in <xref target="token-endpoint-example-rt"/> below
      with the response shown in <xref target="response-example-rt"/>
      (extra line breaks and indentation are for display purposes only).

<figure title="Access Token Request" anchor="token-endpoint-example-rt">
<artwork><![CDATA[
  POST /as/token.oauth2 HTTP/1.1
  Host: authorization-server.example.com
  Authorization: Basic czZCaGRSa3F0Mzpoc3FFelFsVW9IQUU5cHg0RlNyNHlJ
  Content-Type: application/x-www-form-urlencoded

  grant_type=refresh_token
  &refresh_token=4LTC8lb0acc6Oy4esc1Nk9BWC0imAwH7kic16BDC2
  &resource=https%3A%2F%2Fcontacts.example.com%2Fapp%2F
]]></artwork>
</figure>

      <figure title="Access Token Response" anchor="response-example-rt">
        <artwork><![CDATA[
   HTTP/1.1 200 OK
   Content-Type: application/json
   Cache-Control: no-cache, no-store

   {
      "access_token":"eyJhbGciOiJFUzI1NiIsImtpZCI6Ijc3In0.eyJpc3MiOi
       JodHRwOi8vYXV0aG9yaXphdGlvbi1zZXJ2ZXIuZXhhbXBsZS5jb20iLCJzdWI
       iOiJfX2JfYyIsImV4cCI6MTU4ODQyMDgyNiwic2NvcGUiOiJjb250YWN0cyIs
       ImF1ZCI6Imh0dHBzOi8vY29udGFjdHMuZXhhbXBsZS5jb20vIn0.5f4yhqazc
       OSlJw4y94KPeWNEFQqj2cfeO8x4hr3YbHtIl3nQXnBMw5wREY5O1YbZED-GfH
       UowfmtNaA5EikYAw",
      "token_type":"Bearer",
      "expires_in":3600,
      "scope":"contacts"
   }]]></artwork>
      </figure>
    </t>
    </section>

    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
        An access token that is audience-restricted to a protected resource that obtains that
        token legitimately cannot be used to access resources on behalf of the
        resource owner at other protected resources. The <spanx style="verb">resource</spanx>
        parameter enables a client to indicate the protected resources where the requested access
        token will be used, which in turn enables the authorization server to apply the
        appropriate audience restrictions to the token.
      </t>
      <t>
        Some servers may host user content or be multi-tenant. In order to avoid attacks that might
        confuse a client into sending an access token to a resource that is user controlled or is owned by a different tenant,
        it is important to use a specific
        resource URI including a path component. This will cause any access token issued for
        accessing the user controlled resource to have an invalid audience if replayed against the legitimate
        resource API.
      </t>
      <t>
        Although multiple occurrences of the <spanx style="verb">resource</spanx> parameter
        may be included in a request, using only a single <spanx style="verb">resource</spanx> parameter
        is encouraged. A bearer token that has multiple intended recipients (audiences) indicating that the token
        is valid at more than one protected resource can be used by any one of those protected resources to access
        any of the other protected resources. Thus, a high degree of trust between the involved parties
        is needed when using access tokens with multiple audiences. Furthermore an authorization server may
        be unwilling or unable to fulfill a token request with multiple resources.
      </t>
      <t>
        Whenever feasible, the <spanx style="verb">resource</spanx> parameter
        should correspond to the network addressable location of the protected resource. 
        This makes it possible for the client to validate that the resource being requested controls the corresponding 
        network location, reducing the risk of malicious endpoints obtaining tokens meant for other resources.
        If the <spanx style="verb">resource</spanx> parameter contains an abstract identifier, it is the client's 
        responsibility to validate out of band that any network endpoint to which tokens are sent are the intended audience for that identifier.
      </t>
    </section>


    <section anchor="IANA" title="IANA Considerations">
      <section title="OAuth Parameters Registration">
        <t>
          This specification updates the following value
          in the IANA "OAuth Parameters" registry
          <xref target="IANA.OAuth.Parameters"/>
          established by <xref target="RFC6749"/>.
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style='symbols'>
            <t>Parameter name: resource</t>
            <t>Parameter usage location: authorization request, token request</t>
            <t>Change controller: IESG</t>
            <t>Specification document(s): [[ this specification ]]</t>
          </list>
        </t>
      </section>
      <section title="OAuth Extensions Error Registration">
        <t>
          This specification updates the following error in
          the IANA "OAuth Extensions Error Registry"
          <xref target="IANA.OAuth.Parameters"/>
          established by <xref target="RFC6749"/>.
        </t>
        <t>
          <?rfc subcompact="yes"?>
          <list style='symbols'>
            <t>Error name: invalid_target</t>
            <t>Error usage location: implicit grant error response, token error response</t>
            <t>Related protocol extension: resource parameter</t>
            <t>Change controller: IESG</t>
            <t>Specification document(s): [[ this specification ]]</t>
          </list>
        </t>
      </section>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml' ?>

      <reference anchor="IANA.OAuth.Parameters" target="http://www.iana.org/assignments/oauth-parameters">
        <front>
          <title>OAuth Parameters</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date/>
        </front>
      </reference>

    </references>

    <references title="Informative References">
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7662.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7644.xml' ?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-jwsreq-19.xml'?>
    </references>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
        This specification was developed within the OAuth Working Group
        under the chairmanship of Hannes Tschofenig
        and Rifaat Shekh-Yusef with Eric Rescorla, Benjamin Kaduk and Roman Danyliw
        serving as Security Area Directors.  Additionally, the following
        individuals contributed ideas, feedback, and wording
        that helped shape this specification:</t>
      <t>
        Vittorio Bertocci,
        Sergey Beryozkin,
        Roman Danyliw,
        William Denniss,
        Vladimir Dzhuvinov,
        George Fletcher,
        Dick Hardt,
        Phil Hunt,
        Michael Jones,
        Torsten Lodderstedt,
        Anthony Nadalin,
        Justin Richer,
        Nat Sakimura,
        Rifaat Shekh-Yusef,
        Filip Skokan,
        and
        Hans Zandbelt.
      </t>
    </section>

    <section anchor="History" title="Document History">
      <?rfc subcompact="yes"?>
      <t>
	[[ to be removed by the RFC Editor before publication as an RFC ]]
      </t>
      <t>
        draft-ietf-oauth-resource-indicators-06
        <list style='symbols'>
          <t>Expand JWT acronym on first use per Genart last call review.</t>
          <t>Updates from IESG evaluation comments.</t>
        </list>
      </t>
      <t>
        draft-ietf-oauth-resource-indicators-05
        <list style='symbols'>
          <t>Remove specific mention of error_uri, which is rarely (if ever) used and seems to only confuse things for readers of extensions like this one.</t>
        </list>
      </t>
      <t>
        draft-ietf-oauth-resource-indicators-04
        <list style='symbols'>
          <t>Editorial updates from AD review that were overlooked in -03.</t>
        </list>
      </t>
      <t>
        draft-ietf-oauth-resource-indicators-03
        <list style='symbols'>
          <t>Editorial updates from AD review.</t>
          <t>Update draft-ietf-oauth-jwsreq ref to -19.</t>
          <t>Update the IANA requests to say they update the registries.</t>
        </list>
      </t>
      <t>
        draft-ietf-oauth-resource-indicators-02
        <list style='symbols'>
          <t>Clarify that the value of the "resource" parameter is a URI which can be an abstract identifier for the target resource and doesn't necessarily have to correspond to a network addressable location.</t>
        </list>
      </t>
      <t>
        draft-ietf-oauth-resource-indicators-01
        <list style='symbols'>
          <t>Significant rework of the main section of the document attempting to clarify a number of things that came up at, around and after IETF 102 and the call for adoption. </t>
          <t>Change the "invalid_resource" error to "invalid_target" to align with draft-ietf-oauth-token-exchange, which has some overlap in functionality.</t>
          <t>Allow the "resource" parameter value to have a query component (aligning with draft-ietf-oauth-token-exchange).</t>
          <t>Moved the Security Considerations section to before the IANA Considerations.</t>
          <t>Other editorial updates.</t>
          <t>Rework the Acknowledgements section.</t>
          <t>Use RFC 8174 boilerplate.</t>
        </list>
      </t>	    
      <t>
        draft-ietf-oauth-resource-indicators-00
        <list style='symbols'>
          <t>
            First version of the working group document. A replica of draft-campbell-oauth-resource-indicators-02.
          </t>
        </list>
      </t>
      <t>
        draft-campbell-oauth-resource-indicators-02
        <list style='symbols'>
          <t>No changes.</t>
        </list>
      </t>
      <t>
        draft-campbell-oauth-resource-indicators-01
        <list style='symbols'>
          <t>
            Move Hannes Tschofenig, who wrote https://tools.ietf.org/html/draft-tschofenig-oauth-audience in '13, from Acknowledgements to Authors.
          </t>
          <t>
            Added IANA Considerations to register the "resource" parameter and "invalid_resource" error code.
          </t>
        </list>
      </t>
      <t>
        draft-campbell-oauth-resource-indicators-00
        <list style='symbols'>
          <t>
            Initial draft to define a resource parameter for OAuth 2.0.
          </t>
        </list>
      </t>
      <?rfc subcompact="no"?>
    </section>     

  </back>
</rfc>
